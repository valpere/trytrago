openapi: 3.0.3
info:
  title: TryTraGo Dictionary API
  description: |
    API for the TryTraGo multilanguage dictionary server, providing comprehensive
    dictionary entries, meanings, translations, and social features.
  version: 1.0.0
  contact:
    name: TryTraGo Team
    email: support@trytrago.com
    url: https://github.com/valpere/trytrago
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.trytrago.com/api/v1
    description: Production server
  - url: https://staging.trytrago.com/api/v1
    description: Staging server
  - url: http://localhost:8080/api/v1
    description: Local development server

tags:
  - name: Authentication
    description: User authentication operations
  - name: Entries
    description: Dictionary entry operations
  - name: Meanings
    description: Entry meaning operations
  - name: Translations
    description: Translation operations
  - name: Social
    description: Comments and likes operations
  - name: Users
    description: User management operations
  - name: Admin
    description: Administrative operations

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Username or email already exists
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login
      description: Authenticate a user and get JWT tokens
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Invalid credentials
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Get a new access token using a refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Invalid refresh token
        '500':
          $ref: '#/components/responses/InternalServerError'

  /entries:
    get:
      tags:
        - Entries
      summary: List entries
      description: Retrieve a list of dictionary entries with optional filtering
      operationId: listEntries
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: sort_by
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [word, created_at, updated_at]
            default: updated_at
        - name: sort_desc
          in: query
          description: Sort in descending order
          schema:
            type: boolean
            default: false
        - name: word_filter
          in: query
          description: Filter entries by word (partial match)
          schema:
            type: string
        - name: type
          in: query
          description: Filter entries by type
          schema:
            type: string
            enum: [WORD, COMPOUND_WORD, PHRASE]
      responses:
        '200':
          description: List of entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Entries
      summary: Create entry
      description: Create a new dictionary entry
      operationId: createEntry
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEntryRequest'
      responses:
        '201':
          description: Entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Entry already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Entry already exists
        '500':
          $ref: '#/components/responses/InternalServerError'

  /entries/{id}:
    get:
      tags:
        - Entries
      summary: Get entry
      description: Retrieve a specific dictionary entry by ID
      operationId: getEntry
      parameters:
        - name: id
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Entry found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Entries
      summary: Update entry
      description: Update an existing dictionary entry
      operationId: updateEntry
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEntryRequest'
      responses:
        '200':
          description: Entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Entries
      summary: Delete entry
      description: Delete a dictionary entry
      operationId: deleteEntry
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Entry deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /entries/{entryId}/meanings:
    get:
      tags:
        - Meanings
      summary: List meanings
      description: Retrieve the meanings of a specific entry
      operationId: listMeanings
      parameters:
        - name: entryId
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of meanings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeaningListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Meanings
      summary: Add meaning
      description: Add a new meaning to an entry
      operationId: addMeaning
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMeaningRequest'
      responses:
        '201':
          description: Meaning added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeaningResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /entries/{entryId}/meanings/{meaningId}:
    get:
      tags:
        - Meanings
      summary: Get meaning
      description: Retrieve a specific meaning
      operationId: getMeaning
      parameters:
        - name: entryId
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Meaning found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeaningResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Meanings
      summary: Update meaning
      description: Update an existing meaning
      operationId: updateMeaning
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeaningRequest'
      responses:
        '200':
          description: Meaning updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeaningResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Meanings
      summary: Delete meaning
      description: Delete a meaning from an entry
      operationId: deleteMeaning
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Meaning deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /entries/{entryId}/meanings/{meaningId}/comments:
    post:
      tags:
        - Social
      summary: Add comment to meaning
      description: Add a comment to a meaning
      operationId: addMeaningComment
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /entries/{entryId}/meanings/{meaningId}/likes:
    post:
      tags:
        - Social
      summary: Toggle like on meaning
      description: Toggle a like on a meaning (add if not present, remove if present)
      operationId: toggleMeaningLike
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Like toggled successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /entries/{entryId}/meanings/{meaningId}/translations:
    get:
      tags:
        - Translations
      summary: List translations
      description: Retrieve translations for a specific meaning
      operationId: listTranslations
      parameters:
        - name: entryId
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning ID
          required: true
          schema:
            type: string
            format: uuid
        - name: language_id
          in: query
          description: Filter translations by language (ISO 639-1 code)
          schema:
            type: string
            pattern: '^[a-z]{2,5}
      responses:
        '200':
          description: List of translations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Translations
      summary: Create translation
      description: Add a translation to a meaning
      operationId: createTranslation
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequest'
      responses:
        '201':
          description: Translation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Translations
      summary: Delete translation
      description: Delete a translation
      operationId: deleteTranslation
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry ID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning ID
          required: true
          schema:
            type: string
            format: uuid
        - name: translationId
          in: path
          description: Translation ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Translation deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
