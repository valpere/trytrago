openapi: 3.0.0
info:
  title: TryTraGo Dictionary API
  description: |
    TryTraGo is a high-performance multilanguage dictionary server designed to support approximately 
    60 million dictionary entries with robust API functionality, social features, and multi-database support.
  version: 1.0.0
  contact:
    name: TryTraGo Support
    email: support@trytrago.com
    url: https://github.com/valpere/trytrago
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.trytrago.com/api/v1
    description: Production API server

tags:
  - name: Entries
    description: Dictionary entries operations
  - name: Meanings
    description: Meanings operations for dictionary entries
  - name: Translations
    description: Translation operations for meanings
  - name: Authentication
    description: User authentication operations
  - name: User
    description: User profile and content operations
  - name: Admin
    description: Administrative operations

paths:
  /entries:
    get:
      summary: List dictionary entries
      description: Returns a paginated list of dictionary entries
      tags:
        - Entries
      parameters:
        - name: limit
          in: query
          description: Maximum number of entries to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of entries to skip
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: sort_by
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [word, created_at, updated_at]
            default: word
        - name: sort_desc
          in: query
          description: Sort in descending order
          schema:
            type: boolean
            default: false
        - name: word_filter
          in: query
          description: Filter entries by word (case-insensitive partial match)
          schema:
            type: string
        - name: type
          in: query
          description: Filter entries by type
          schema:
            type: string
            enum: [WORD, COMPOUND_WORD, PHRASE]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create a new dictionary entry
      description: Creates a new dictionary entry
      tags:
        - Entries
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEntryRequest'
      responses:
        '201':
          description: Entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Entry already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /entries/{id}:
    get:
      summary: Get a dictionary entry by ID
      description: Returns a dictionary entry by its UUID
      tags:
        - Entries
      parameters:
        - name: id
          in: path
          description: Entry UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      summary: Update a dictionary entry
      description: Updates an existing dictionary entry
      tags:
        - Entries
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Entry UUID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEntryRequest'
      responses:
        '200':
          description: Entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Entry with the same word already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete a dictionary entry
      description: Deletes an existing dictionary entry
      tags:
        - Entries
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Entry UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Entry deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /entries/{id}/meanings:
    get:
      summary: List meanings for an entry
      description: Returns all meanings for a dictionary entry
      tags:
        - Meanings
      parameters:
        - name: id
          in: path
          description: Entry UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeaningListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /meaning-details/{entryId}/{meaningId}:
    get:
      summary: Get a specific meaning
      description: Returns a specific meaning for a dictionary entry
      tags:
        - Meanings
      parameters:
        - name: entryId
          in: path
          description: Entry UUID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeaningResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      summary: Update a meaning
      description: Updates an existing meaning for a dictionary entry
      tags:
        - Meanings
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry UUID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning UUID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeaningRequest'
      responses:
        '200':
          description: Meaning updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeaningResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete a meaning
      description: Deletes an existing meaning for a dictionary entry
      tags:
        - Meanings
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry UUID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Meaning deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /meaning-details/{entryId}:
    post:
      summary: Add a meaning to an entry
      description: Adds a new meaning to a dictionary entry
      tags:
        - Meanings
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry UUID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMeaningRequest'
      responses:
        '201':
          description: Meaning created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeaningResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /meaning-details/{entryId}/{meaningId}/translations:
    get:
      summary: List translations for a meaning
      description: Returns all translations for a specific meaning
      tags:
        - Translations
      parameters:
        - name: entryId
          in: path
          description: Entry UUID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning UUID
          required: true
          schema:
            type: string
            format: uuid
        - name: language
          in: query
          description: Filter translations by language code
          schema:
            type: string
            minLength: 2
            maxLength: 5
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Add a translation to a meaning
      description: Adds a new translation to a specific meaning
      tags:
        - Translations
      security:
        - BearerAuth: []
      parameters:
        - name: entryId
          in: path
          description: Entry UUID
          required: true
          schema:
            type: string
            format: uuid
        - name: meaningId
          in: path
          description: Meaning UUID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequest'
      responses:
        '201':
          description: Translation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      summary: Refresh authentication token
      description: Refreshes an authentication token using a refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me:
    get:
      summary: Get current user
      description: Returns the current authenticated user's profile
      tags:
        - User
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      summary: Update current user
      description: Updates the current authenticated user's profile
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete current user
      description: Deletes the current authenticated user's account
      tags:
        - User
      security:
        - BearerAuth: []
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CreateEntryRequest:
      type: object
      required:
        - word
        - type
      properties:
        word:
          type: string
          minLength: 1
          example: "example"
        type:
          type: string
          enum: [WORD, COMPOUND_WORD, PHRASE]
          example: "WORD"
        pronunciation:
          type: string
          example: "ɪɡˈzæmpəl"

    UpdateEntryRequest:
      type: object
      properties:
        word:
          type: string
          example: "example"
        type:
          type: string
          enum: [WORD, COMPOUND_WORD, PHRASE]
          example: "WORD"
        pronunciation:
          type: string
          example: "ɪɡˈzæmpəl"

    EntryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        word:
          type: string
        type:
          type: string
          enum: [WORD, COMPOUND_WORD, PHRASE]
        pronunciation:
          type: string
        meanings:
          type: array
          items:
            $ref: '#/components/schemas/MeaningResponse'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    EntryListResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/EntryResponse'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    CreateMeaningRequest:
      type: object
      required:
        - part_of_speech_id
        - description
      properties:
        part_of_speech_id:
          type: string
          format: uuid
        description:
          type: string
        examples:
          type: array
          items:
            type: string

    UpdateMeaningRequest:
      type: object
      properties:
        part_of_speech_id:
          type: string
          format: uuid
        description:
          type: string
        examples:
          type: array
          items:
            type: string

    MeaningResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        entry_id:
          type: string
          format: uuid
        part_of_speech:
          type: string
        description:
          type: string
        examples:
          type: array
          items:
            $ref: '#/components/schemas/ExampleResponse'
        translations:
          type: array
          items:
            $ref: '#/components/schemas/TranslationResponse'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'
        likes_count:
          type: integer
        current_user_liked:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MeaningListResponse:
      type: object
      properties:
        meanings:
          type: array
          items:
            $ref: '#/components/schemas/MeaningResponse'
        total:
          type: integer

    ExampleResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
        context:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateTranslationRequest:
      type: object
      required:
        - language_id
        - text
      properties:
        language_id:
          type: string
          minLength: 2
          maxLength: 5
          example: "fr"
        text:
          type: string
          example: "exemple"

    UpdateTranslationRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          example: "exemple"

    TranslationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        meaning_id:
          type: string
          format: uuid
        language_id:
          type: string
        text:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'
        likes_count:
          type: integer
        current_user_liked:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        created_by:
          $ref: '#/components/schemas/UserSummary'

    TranslationListResponse:
      type: object
      properties:
        translations:
          type: array
          items:
            $ref: '#/components/schemas/TranslationResponse'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    CommentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        user:
          $ref: '#/components/schemas/UserSummary'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 500

    UserSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        avatar:
          type: string

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          format: password

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          format: password
        avatar:
          type: string

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        avatar:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
          description: Expiration time in seconds
        user:
          $ref: '#/components/schemas/UserResponse'

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
        error:
          type: string
          description: Error type
        message:
          type: string
          description: User-friendly error message
        details:
          type: object
          additionalProperties: true
          description: Optional error details
        request_id:
          type: string
          description: Request ID for tracing
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
